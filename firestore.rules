rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isFriend(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)/friends/$(request.auth.uid));
    }
    
    function isPublic(privacy) {
      return privacy == 'public';
    }
    
    function canReadBasedOnPrivacy(privacy, userId) {
      return isPublic(privacy) || isOwner(userId) || (privacy == 'friends' && isFriend(userId));
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
      
      // User subcollections
      match /friends/{friendId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      match /following/{followingId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      match /activity/{activityId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isFriend(userId));
        allow write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Places collection
    match /places/{placeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false; // Places shouldn't be deleted
    }

    // Lists collection
    match /lists/{listId} {
      allow read: if isAuthenticated() && canReadBasedOnPrivacy(resource.data.privacy, resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if isAuthenticated() && canReadBasedOnPrivacy(resource.data.privacy, resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // User preferences collection
    match /userPreferences/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Analytics collection (write-only for users, read-only for admins)
    match /analytics/{document=**} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if false; // Only backend should read analytics
    }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 